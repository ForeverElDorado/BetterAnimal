<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAABVAAAAZgAA
        AFkAAABSAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAF
        B9sJa47GBCg3xAEMEdIBDhPIAAAASwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAALgAFB74Jao3FBDFBwQuAqc0BCg7FAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAADAAAAE0AAACTAAAAsgAAAPoBDxXPAyErxAEUHMoAAAAdAAAAAAAAAAAAAAAAAAAAAAAA
        ABgAAABCAAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAASwEEB7MGDx3IEzFgxQcQH8QECRHHG0WGyCVbsusXOm/HAAAB9AEDBMkAAAB1AAAACgAA
        AEUGCAO5IC0PwSc4E8AAAACHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAACwAAAKgECRLMESlQuR9OmdEoZcX/KGXF/ydivvcCBw7PJ2PC+ihlxf8RKlHCFzx1yREr
        VMAAAADsL0MWwnerOPpxojXsDRIGygAAAD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAP+EAAH//gAB//4AA//+AA///4Af///g/8=
</value>
  </data>
</root>