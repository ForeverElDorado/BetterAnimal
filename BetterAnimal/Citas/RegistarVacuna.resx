<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAcAAAA7AAAARAAAAEQAAABEAAAARAAAAEQAAABEAAAARAAAAEQAAABEAAAARAAA
        AD0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ACADExizAxgfkwMbI5gEHynFBTFB4QhigvEFFSn7F0Kh/xZAnP8XQqH/F0Kh/xU8kv8UO5H/FDuR/xQ7
        kf8UO5H/Chs/7gAAACEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAMXImIDGiPsCW6T/g+59v8Qv/7/EL/+/wkzVf8iY/L/DCFQ/w8rZ/8iY/L/ETB0/wse
        SP8bT8H/ImPy/yJj8v8XQqT+AwMIWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAABglTBBojsQAAAEoCGiKUBSs52whde+wNndH/CStO/yJi8P8fWtz/IF3j/yJj
        8v8fW97/IV/o/x5Z2P8iY/L/ImPy/xlJsv8CCRdxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        H//8AD//8AH///gH///8D/////////////8=
</value>
  </data>
</root>