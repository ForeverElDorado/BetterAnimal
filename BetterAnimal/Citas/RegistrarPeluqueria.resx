<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAID/BAZ0
        +VYHdvhsB3b4bAZ0+VYAgP8EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG/0FwZz
        97gJePf4DH34/wx++P8Mfvj/DHz4/wl49fgGc/e2AGbyFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABp
        9C4FcvT0Cnr2/w2A+f8Pg/v/EIX7/xCF+/8Pg/v/DX/4/wp69v8FcvXzAGjzLAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAP8CAm3y7Ql49P8Of/j/EYX7/xOI/P8Tiv3/E4r9/xOJ/f8Rhvv/DoD4/wl49f8CbfLsAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAABp9XwFcPH/C3z2/xGF+v8Ui/z/FY7+/xeP//8Xj/7/FY39/xSL/P8Rhfr/DH32/wZx
        8f8AafR5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACAgIACB2ru5Ahz8v8Ogfj/E4n7/xeQ/f8Zkv7/GZX//xmU//8Ykv7/F4/9/xOJ
        +/8OgPf/B3Tz/wdr7+IA//8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAYYbCFV6Dus4Ia+3/CHbz/xCC9/8Wjfz/GpT9/yGY/f86oPb/Op/2/x+Z
        /v8ZlP3/FYz7/xCD+P8Jd/P/CGvt/12Du81hhsIVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAF+HvjNkib73aI2//wxu7f8JdvP/EYT3/xeP+/9Eo/P/i7ff/5O5
        3f+Tud3/irfg/0Oi8/8Xj/z/EYT4/wl39P8Mbu3/aI2//2SJvvZhhb0yAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABbgL8cZYq+8mqPwP9zmcf/JXvn/wh18v8Qgvb/L5f1/5G4
        3v+Qttv/i7HX/4ux2P+Rt9v/kbje/y+X9v8Qg/f/CHXy/yZ75/9zmcf/ao/A/2aKvvFiiboaAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVaqqA1+Eu+Rojb//c5jG/3iey/9hldX/B3Dy/w+A
        9v9mo97/V3CU/z1Td/81SW3/NUlt/z1Td/9XcJP/ZaPf/w+A9v8HcfH/ZJbU/3iey/9zmMb/aI2//1+E
        u+KAgIACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABfgr2DZYm8/3GWxf93ncr/eqHN/32k
        z/8Xee7/DHrz/4i13/+Tud3/k7nd/5O53f+Tud3/k7nd/5O53f+Itd//C3v0/yF97P99pM//eqHN/3ed
        yv9xlsX/ZYi8/2CFu4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AWCEufVrkMD/dZrI/3qh
        zP98os7/gafR/22g2f8Jc/L/jrfe/5O53f+Tud3/k7nd/5O53f+Tud3/k7nd/4633v8JdPL/c6PY/4Gn
        0f98os7/eqHM/3WayP9rkMD/X4S59AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABfgbtLYoW5/3CV
        xP94nsr/e6HN/3+lz/+DqdP/hK3T/zGC3/9rpeP/kLXb/5O53f+Tud3/k7nd/5O53f+Ptdv/aqXj/zKB
        3/+Fq9P/g6nT/3+lz/97oc3/d53J/3CVxP9hhbn/XYG7RwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF2C
        ubBmibz/c5nH/3qgy/98os7/gafR/4Ws1P9zmcj/YYfA/zGF5f99os3/WXOV/4Cjxv+AosX/WnOW/3me
        yf8zheb/YIe//3eayP+FrNT/gafR/3yizv95n8v/cpjG/2aJvP9dgrqtAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAXIG5z2eNvv90msf/eqDN/32jz/+CqNL/gqjU/2WMwv9ghr//XobA/2GSzf9MZIf/jbHW/42x
        1v9NZIf/YZLO/16GwP9ghr//ZovD/4Co1P+CqNL/faTP/3qgzf90msj/Z42+/12BuM0AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABdgrjeaI2//3WayP96oMz/fqPP/4Ko0v9/pdH/YojA/2CGv/9ghr//YIa//2+a
        zf+HrdT/h6zU/22Yy/9ghr//YIa//2CGv/9hiMH/f6bQ/4Ko0v9+o8//eqDM/3SZx/9ojb//XIG33QAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAF2CuMxnjL7/dJnI/3mfzP99o8//gafR/4Cm0v9iiL//YIa//1t+
        sv9CV3f/U3Cd/2CGv/9ghr//UW+b/0JXd/9bf7T/YIa//2OJwf+BpNP/gafR/32jz/95n8z/dJnI/2eM
        vv9cgbjKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXYG4omSJvP9ymMb/eZ/L/3yizv+BptH/f6bT/2iP
        xP9ghr//LTQ6/yMqNv8kJzD/WXmm/1l5pv8mKTT/Iyo2/y4zPP9ghsD/aI/B/3+l0/+BptH/fKLO/3mf
        y/9ymMb/ZIm8/16Bup4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABcgLgyX4S5/2+UxP93nMr/e6DM/36k
        0P+CqM3/cpnJ/2GHwP9edY//QUhU/1Bidf9ihrz/Y4i8/1Znev83P0v/X3iS/2KHwf9zmMn/gqnP/36k
        0P97oMz/d5zK/2+UxP9ghLn/WoW6MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABdgbjnaY2//3SZ
        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
        AP//AAD//4AB///AA///4Af///AP//////8=
</value>
  </data>
</root>